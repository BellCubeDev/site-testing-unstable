{"version":3,"file":"nexus-stats-scraper.ts","names":["getInputValue","api_baseUrl","window","statsScraper","scrapeStats","stats","parseDate","str","firstTempDate","Date","getFullYear","getMonth","getDate","mappedDateToData","date","endorsementCount","Object","entries","endorsements","__thisDate","thisDate","getTime","dateObj","dlCount","dlAndViews","mod_daily_counts","downloads","viewCount","mod_page_views","pageViews","releases","release","fileUploads","message","push","fromEntries","sort","console","debug","parseInt","lastReleaseDate","keys","filter","releaseDate","pop","diffDays","Math","round","daysSinceLastUpload","values","parseStats","async","modID","document","getElementById","gameID","topLevel","fetch","getApiRequestInit","then","r","json","endorsements_","uid","dlAndViews_","game_id","fileUploads_","now","Promise","all","fetchStats","setIDsFromURL","url","urlMatch","match","Error","modIDElem","gameIDElem","gameDomain","value","toString","cachedApiKey","willClearCache","apiKey","method","requestAnimationFrame","requestInit","cache","referrerPolicy","credentials","headers","accept","origin","location","log"],"sourceRoot":"https://raw.githubusercontent.com/BellCubeDev/site-testing-unstable/deployment/","sources":["https://raw.githubusercontent.com/BellCubeDev/site-testing/deployment/tools/nexus-stats-scraper/nexus-stats-scraper.ts"],"sourcesContent":["import type * as rawInfo from './nexusModsInfo';\nimport { getInputValue } from '../../universal.js';\n\nconst api_baseUrl = `https://api.nexusmods.com/v1/games`;\n\ndeclare global {interface Window {\n    statsScraper: {\n        scrapeStats: () => void;\n        setIDsFromURL: () => void;\n    }\n}}\n\nwindow.statsScraper = {\n    scrapeStats,\n    setIDsFromURL\n};\n\n// Create debug directories and save environment\n\n\nlet cachedApiKey:null|string = null;\nlet willClearCache = false;\nfunction getApiKey() : string|null {\n    if (cachedApiKey) return cachedApiKey;\n\n    cachedApiKey = getInputValue(document.getElementById('statsScraper_apiKey') as HTMLInputElement) || null;\n\n    if (!willClearCache){\n        willClearCache = true;\n        requestAnimationFrame(()=>requestAnimationFrame(() =>{\n            willClearCache = false;\n            cachedApiKey = null;\n        }));\n    }\n\n    return cachedApiKey;\n}\n\nfunction getApiRequestInit(apiKey?: string|null, method: string = 'get') : RequestInit {\n    if (!apiKey) apiKey = getApiKey();\n    if (!apiKey) throw new Error('No API key provided!');\n\n\n    const requestInit:RequestInit = {\n        cache:'no-cache',\n        method,\n        referrerPolicy: 'unsafe-url',\n        credentials: 'omit',\n        headers: {\n            apiKey,\n            accept: 'application/json',\n            'user-agent': 'BellCubeDev/NexusMods-Mod-Stats-Scraper',\n            origin: window.location.origin\n        }\n    };\n\n    console.log('Returning request init:', requestInit);\n\n    return requestInit;\n}\n\nasync function setIDsFromURL(url?: string) {\n    if (!url) url = getInputValue(document.getElementById('statsScraper_extractURL') as HTMLInputElement);\n\n    const urlMatch = url.match(/.*?\\bnexusmods\\.com\\/(\\w+)\\/mods\\/(?:.*?\\/)*?(\\d+)\\/?(\\?.*|#.*|[^\\w]*)$/);\n    if (!urlMatch) throw new Error('Invalid URL');\n\n    const modIDElem = document.getElementById('statsScraper_modID') as HTMLInputElement;\n    const gameIDElem = document.getElementById('statsScraper_gameID') as HTMLInputElement;\n    if (!modIDElem || !gameIDElem) throw new Error('Could not find modID or gameID input elements');\n\n    const modID = parseInt(urlMatch[2] ?? '');\n\n    const gameDomain = urlMatch[1] ?? '';\n    const gameID = await fetch(`${api_baseUrl}/${gameDomain}.json`, getApiRequestInit())\n        .then(r => r.json() as Promise<{game_id: number}>)\n        .then(r => r.game_id);\n\n    modIDElem.value = modID.toString();\n    gameIDElem.value = gameID.toString();\n}\n\nasync function scrapeStats() {\n    const stats = parseStats(await fetchStats());\n\n}\n\n\n/** Parsed date data */\ninterface IDateData {\n    dateObj?: Date;\n    pageViews?: number;\n    downloads?: number;\n    endorsements?: number;\n    daysSinceLastUpload?: number | null;\n}\n\n/***\n *\n *\n *    $$$$$$$$\\             $$\\               $$\\\n *    $$  _____|            $$ |              $$ |\n *    $$ |       $$$$$$\\  $$$$$$\\    $$$$$$$\\ $$$$$$$\\   $$$$$$\\   $$$$$$$\\\n *    $$$$$\\    $$  __$$\\ \\_$$  _|  $$  _____|$$  __$$\\ $$  __$$\\ $$  _____|\n *    $$  __|   $$$$$$$$ |  $$ |    $$ /      $$ |  $$ |$$$$$$$$ |\\$$$$$$\\\n *    $$ |      $$   ____|  $$ |$$\\ $$ |      $$ |  $$ |$$   ____| \\____$$\\\n *    $$ |      \\$$$$$$$\\   \\$$$$  |\\$$$$$$$\\ $$ |  $$ |\\$$$$$$$\\ $$$$$$$  |\n *    \\__|       \\_______|   \\____/  \\_______|\\__|  \\__| \\_______|\\_______/\n *\n */\n\ninterface statsItems {\n    topLevel: rawInfo.IMod\n    endorsements: rawInfo.IEndorsements\n    dlAndViews: rawInfo.IDLsAndViews\n    fileUploads: rawInfo.IFileUploads\n}\n\nasync function fetchStats():Promise<statsItems> {\n    const modID = parseInt(getInputValue(document.getElementById('statsScraper_modID') as HTMLInputElement));\n    const gameID = parseInt(getInputValue(document.getElementById('statsScraper_gameID') as HTMLInputElement));\n\n    const topLevel = await fetch(`${api_baseUrl}/${gameID}/mods/${modID}.json`, getApiRequestInit())\n                                .then(r => r.json()) as rawInfo.IMod;\n\n    // Get Endorsements, Downloads, Page Views, and Uploads data all in one go thanks to the power of Promise.all\n    const endorsements_ = fetch(`https://nexus-stats.fra1.cdn.digitaloceanspaces.com/mods/${topLevel.uid}/daily-endorsements.json`, getApiRequestInit())\n                            .then(r => r.json() as Promise<rawInfo.IEndorsements>);\n    const dlAndViews_   = fetch(`https://staticstats.nexusmods.com/mod_monthly_stats/${topLevel.game_id}/${modID}.json`, getApiRequestInit())\n                            .then(r => r.json()  as Promise<rawInfo.IDLsAndViews>);\n    const fileUploads_  = fetch(`https://www.nexusmods.com/Core/Libs/Common/Widgets/Graph?GetModReleases&game_id=${topLevel.game_id}&mod_id=${modID}&startdate=0&enddate=${Date.now()}`, getApiRequestInit())\n                            .then(r => r.json() as Promise<rawInfo.IFileUploads>);\n\n    const [endorsements, dlAndViews, fileUploads] = await Promise.all([endorsements_, dlAndViews_, fileUploads_]);\n\n    console.debug('Fetched stats: ', {topLevel, endorsements, dlAndViews, fileUploads});\n    return {topLevel, endorsements, dlAndViews, fileUploads};\n}\n\n\n/*\n *\n *\n *    $$$$$$$\\                                $$\\\n *    $$  __$$\\                               \\__|\n *    $$ |  $$ | $$$$$$\\   $$$$$$\\   $$$$$$$\\ $$\\ $$$$$$$\\   $$$$$$\\\n *    $$$$$$$  | \\____$$\\ $$  __$$\\ $$  _____|$$ |$$  __$$\\ $$  __$$\\\n *    $$  ____/  $$$$$$$ |$$ |  \\__|\\$$$$$$\\  $$ |$$ |  $$ |$$ /  $$ |\n *    $$ |      $$  __$$ |$$ |       \\____$$\\ $$ |$$ |  $$ |$$ |  $$ |\n *    $$ |      \\$$$$$$$ |$$ |      $$$$$$$  |$$ |$$ |  $$ |\\$$$$$$$ |\n *    \\__|       \\_______|\\__|      \\_______/ \\__|\\__|  \\__| \\____$$ |\n *                                                          $$\\   $$ |\n *                                                          \\$$$$$$  |\n *                                                           \\______/\n */\n\ntype IModStats = Record<number, IDateData>\n\nfunction parseStats(stats:statsItems):IDateData[] {\n\n    /** Returns the passed-in, distilled down to the day */\n    function parseDate(str:number|string|Date):Date {\n        const firstTempDate = new Date(str);\n        return new Date(firstTempDate.getFullYear(), firstTempDate.getMonth(), firstTempDate.getDate());\n    }\n\n    const mappedDateToData: Record<number, IDateData> = {};\n\n    for (const [date, endorsementCount] of Object.entries(stats.endorsements.endorsements)) {\n        const __thisDate = parseDate(date);\n        const thisDate = __thisDate.getTime();\n\n        if (!mappedDateToData[thisDate]) mappedDateToData[thisDate] = {};\n\n        mappedDateToData[thisDate]!.endorsements = endorsementCount;\n        mappedDateToData[thisDate]!.dateObj = __thisDate;\n    }\n\n    for (const [date, dlCount] of Object.entries(stats.dlAndViews.mod_daily_counts)) {\n        const __thisDate = parseDate(date);\n        const thisDate = __thisDate.getTime();\n\n        if (!mappedDateToData[thisDate]) mappedDateToData[thisDate] = {};\n\n        mappedDateToData[thisDate]!.downloads = dlCount;\n        mappedDateToData[thisDate]!.dateObj = __thisDate;\n    }\n\n    for (const [date, viewCount] of Object.entries(stats.dlAndViews.mod_page_views)) {\n        const __thisDate = parseDate(date);\n        const thisDate = __thisDate.getTime();\n\n        if (!mappedDateToData[thisDate]) mappedDateToData[thisDate] = {};\n\n        mappedDateToData[thisDate]!.pageViews = viewCount;\n        mappedDateToData[thisDate]!.dateObj = __thisDate;\n    }\n\n    const releases: Record<number, rawInfo.ISingleUpload[]> = {};\n    for (const release of stats.fileUploads.message.releases) {\n        const thisDate = parseDate(release.date * 1000).getTime();\n\n        if (!releases[thisDate]) releases[thisDate] = [];\n\n        release.date = thisDate;\n        releases[thisDate]!.push(release);\n    }\n    Object.fromEntries(Object.entries(releases).sort());\n\n    console.debug('Fetched releases:', releases);\n\n    for (const [date] of Object.entries(mappedDateToData)) {\n\n        const thisDate = parseInt(date);\n\n        const lastReleaseDate = parseInt(\n                                Object.keys(releases)\n                                .filter(releaseDate => parseInt(releaseDate) <= thisDate).sort().pop()\n                            ?? '-1' );\n\n        const diffDays = lastReleaseDate === -1 ? null : Math.round((thisDate - lastReleaseDate) / (1000 * 60 * 60 * 24));\n\n        mappedDateToData[thisDate]!.daysSinceLastUpload = diffDays;\n    }\n\n    return Object.values(mappedDateToData);\n}\n\n/*\n *    $$$$$$$$\\ $$\\ $$\\                 $$$$$$$$\\\n *    $$  _____|\\__|$$ |                \\__$$  __|\n *    $$ |      $$\\ $$ | $$$$$$\\           $$ |    $$$$$$\\   $$$$$$\\   $$$$$$\\   $$$$$$$\\\n *    $$$$$\\    $$ |$$ |$$  __$$\\          $$ |   $$  __$$\\ $$  __$$\\ $$  __$$\\ $$  _____|\n *    $$  __|   $$ |$$ |$$$$$$$$ |         $$ |   $$ |  \\__|$$$$$$$$ |$$$$$$$$ |\\$$$$$$\\\n *    $$ |      $$ |$$ |$$   ____|         $$ |   $$ |      $$   ____|$$   ____| \\____$$\\\n *    $$ |      $$ |$$ |\\$$$$$$$\\          $$ |   $$ |      \\$$$$$$$\\ \\$$$$$$$\\ $$$$$$$  |\n *    \\__|      \\__|\\__| \\_______|         \\__|   \\__|       \\_______| \\_______|\\_______/\n *\n *\n *\n */\n\n\ninterface IUpdatedFile {\n    fileInfo: rawInfo.IFile;\n    oldFile: IUpdatedFile|null;\n}\n\ninterface IFileTrees {\n    fileTrees: IUpdatedFile[];\n    fileTreesByID: Record<number, IUpdatedFile>;\n}\n\nasync function createFileTrees(topLevel: rawInfo.IMod, files: rawInfo.IFile[]) {\n    let hasFinishedFiles = false;\n\n    const fileTrees:IUpdatedFile[] = [];\n    const fileTreesByID:Record<string, IUpdatedFile> = {};\n    let filesById: Record<string, rawInfo.IFile>;\n\n    const fileIDs = files.map(file => file.id[0]);\n\n    const filesFetched:Record<number, boolean> = {};\n    fileIDs.forEach(id=> filesFetched[id] = false );\n\n\n    // List of raw files\n    const hiddenFiles: rawInfo.IFile[] = [];\n\n    // Get the files available to the API directly:\n    const canonicalFiles = await (await fetch(`${api_baseUrl}/${topLevel.domain_name}/mods/${topLevel.mod_id}/files.json`, getApiRequestInit())).json() as rawInfo.IFileList;\n    canonicalFiles.files.forEach(file => filesById[file.id[0]] = file);\n\n    console.debug('Fetched files from API:', canonicalFiles);\n\n    // Get files that have been hidden from the API:\n    for (const fileID of fileIDs) {\n        if (filesFetched[fileID]) continue;\n\n        console.debug(`Fetching file ${fileID} separately...`);\n\n        fetch(`${api_baseUrl}/${topLevel.domain_name}/mods/${topLevel.mod_id}/files/${fileID}.json`, getApiRequestInit())\n            .then(async (fileData) => {\n\n            hiddenFiles.push(await fileData.json());\n            filesFetched[fileID] = true;\n\n            finishFiles();\n\n        });\n    }\n\n    finishFiles();\n\n    async function finishFiles(){\n\n        if (hasFinishedFiles || Object.values(filesFetched).includes(false)) return;\n        hasFinishedFiles = true;\n\n        console.debug('Finished fetching files');\n        console.debug('Files: ', [...canonicalFiles.files, ...hiddenFiles]);\n        console.debug('Updates: ', canonicalFiles.file_updates);\n\n        processFiles([...canonicalFiles.files, ...hiddenFiles], canonicalFiles.file_updates);\n    }\n\n    function processFiles(files: rawInfo.IFile[], updates: rawInfo.IUpdate[]): void {\n        filesById = Object.fromEntries(files.map(file => [file.file_id, file]));\n\n        for (const update of updates) {\n            addUpdate(update);\n        }\n\n        console.debug('File Trees:', fileTrees);\n        console.debug('File Trees by ID:', fileTreesByID);\n    }\n\n    function addUpdate(update: rawInfo.IUpdate) {\n        const oldFile = filesById[update.old_file_id];\n        if (!oldFile) throw new Error(`Could not find OLD file ${update.old_file_id} for update\\n${JSON.stringify(update, undefined, 4)}`);\n\n        const newFile = filesById[update.new_file_id];\n        if (!newFile) throw new Error(`Could not find NEW file ${update.new_file_id} for update\\n${JSON.stringify(update, undefined, 4)}`);\n\n        const oldFileTree = fileTreesByID[oldFile.file_id] ?? {fileInfo: oldFile, oldFile: null};\n        removeOldFileTree(update);\n\n        const newFileTree = {fileInfo: newFile, oldFile: oldFileTree};\n        fileTrees.push(newFileTree);\n\n        // Update file tree by ID\n        fileTreesByID[newFile.file_id] = newFileTree;\n\n        //i += 1;\n        //afs.writeFile(`output/fileTrees${i}.json`, JSON.stringify(fileTrees, undefined, 4), {encoding: 'utf-8'});\n        //afs.writeFile(`output/fileTrees_byID${i}.json`, JSON.stringify(fileTreesByID, undefined, 4), {encoding: 'utf-8'});\n    }\n\n    function removeOldFileTree(update: rawInfo.IUpdate){\n        const oldFile = filesById[update.old_file_id];\n        if (!oldFile) throw new Error(`Could not find OLD file ${update.old_file_id} for update\\n${JSON.stringify(update, undefined, 4)}`);\n\n        const oldFileTree = fileTreesByID[oldFile.file_id] ?? {fileInfo: oldFile, oldFile: null};\n\n        const oldFileTreeIndex = fileTrees.indexOf(oldFileTree);\n        console.log(oldFileTreeIndex);\n\n        if (oldFileTreeIndex < 0) return;\n\n        // Replace old file tree\n        fileTrees.splice(oldFileTreeIndex, 1);\n        removeOldFileTree(update);\n    }\n}\n\n\n\n\n/*\n *    $$$$$$$$\\                                           $$\\\n *    $$  _____|                                          $$ |\n *    $$ |      $$\\   $$\\  $$$$$$\\   $$$$$$\\   $$$$$$\\  $$$$$$\\    $$$$$$$\\\n *    $$$$$\\    \\$$\\ $$  |$$  __$$\\ $$  __$$\\ $$  __$$\\ \\_$$  _|  $$  _____|\n *    $$  __|    \\$$$$  / $$ /  $$ |$$ /  $$ |$$ |  \\__|  $$ |    \\$$$$$$\\\n *    $$ |       $$  $$<  $$ |  $$ |$$ |  $$ |$$ |        $$ |$$\\  \\____$$\\\n *    $$$$$$$$\\ $$  /\\$$\\ $$$$$$$  |\\$$$$$$  |$$ |        \\$$$$  |$$$$$$$  |\n *    \\________|\\__/  \\__|$$  ____/  \\______/ \\__|         \\____/ \\_______/\n *                        $$ |\n *                        $$ |\n *                        \\__|\n */\n\n/** Top row of the CSV */\n// eslint-disable-next-line i18n-text/no-en\nconst csvHeader = 'Date\\tDownloads\\tPage Views\\tEndorsements\\tDays Since Last Upload';\n\nfunction getArrayOfDataData(mappedDateToData: IModStats): Map<string, IDateData> {\n    return new Map(\n        Object.entries(mappedDateToData).sort((a, b) =>\n            - ( (a[1]?.dateObj?.getTime() ?? 0) - (b[1]?.dateObj?.getTime() ?? 0) )\n        )\n    );\n}\n\nfunction getCSV(mappedDateToData: IModStats) : string[] {\n\n    const dataSortedByDescendingDate = getArrayOfDataData(mappedDateToData);\n\n    /** dataSortedByDescendingDate in the form of CSV data strings */\n    const csvData = [...dataSortedByDescendingDate]\n        // Map to CSV string\n        .map(([, thisDateData]) =>                                                        // eslint-disable-next-line i18n-text/no-en\n            `${thisDateData.dateObj?.toLocaleDateString()}\\t${thisDateData.downloads ?? 0}\\t${thisDateData.pageViews ?? 0}\\t${thisDateData.endorsements ?? 0}\\t${thisDateData.daysSinceLastUpload ?? 'No Upload Yet'}`\n        );\n\n    console.debug('CSV data:', csvData);\n    return csvData;\n\n}\n"],"mappings":"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"}