import { getInputValue } from '../../universal.js';
const api_baseUrl = `https://api.nexusmods.com/v1/games`;
window.statsScraper = {
    scrapeStats,
    setIDsFromURL
};
let cachedApiKey = null;
let willClearCache = false;
function getApiKey() {
    if (cachedApiKey)
        return cachedApiKey;
    cachedApiKey = getInputValue(document.getElementById('statsScraper_apiKey')) || null;
    if (!willClearCache) {
        willClearCache = true;
        requestAnimationFrame(() => requestAnimationFrame(() => {
            willClearCache = false;
            cachedApiKey = null;
        }));
    }
    return cachedApiKey;
}
function getApiRequestInit(apiKey, method = 'get') {
    if (!apiKey)
        apiKey = getApiKey();
    if (!apiKey)
        throw new Error('No API key provided!');
    const requestInit = {
        cache: 'no-cache',
        method,
        referrerPolicy: 'unsafe-url',
        credentials: 'omit',
        headers: {
            apiKey,
            accept: 'application/json',
            'user-agent': 'BellCubeDev/NexusMods-Mod-Stats-Scraper',
            origin: window.location.origin
        }
    };
    console.log('Returning request init:', requestInit);
    return requestInit;
}
async function setIDsFromURL(url) {
    if (!url)
        url = getInputValue(document.getElementById('statsScraper_extractURL'));
    const urlMatch = url.match(/.*?\bnexusmods\.com\/(\w+)\/mods\/(?:.*?\/)*?(\d+)\/?(\?.*|#.*|[^\w]*)$/);
    if (!urlMatch)
        throw new Error('Invalid URL');
    const modIDElem = document.getElementById('statsScraper_modID');
    const gameIDElem = document.getElementById('statsScraper_gameID');
    if (!modIDElem || !gameIDElem)
        throw new Error('Could not find modID or gameID input elements');
    const modID = parseInt(urlMatch[2] ?? '');
    const gameDomain = urlMatch[1] ?? '';
    const gameID = await fetch(`${api_baseUrl}/${gameDomain}.json`, getApiRequestInit())
        .then(r => r.json())
        .then(r => r.game_id);
    modIDElem.value = modID.toString();
    gameIDElem.value = gameID.toString();
}
async function scrapeStats() {
    const stats = parseStats(await fetchStats());
}
async function fetchStats() {
    const modID = parseInt(getInputValue(document.getElementById('statsScraper_modID')));
    const gameID = parseInt(getInputValue(document.getElementById('statsScraper_gameID')));
    const topLevel = await fetch(`${api_baseUrl}/${gameID}/mods/${modID}.json`, getApiRequestInit())
        .then(r => r.json());
    const endorsements_ = fetch(`https://nexus-stats.fra1.cdn.digitaloceanspaces.com/mods/${topLevel.uid}/daily-endorsements.json`, getApiRequestInit())
        .then(r => r.json());
    const dlAndViews_ = fetch(`https://staticstats.nexusmods.com/mod_monthly_stats/${topLevel.game_id}/${modID}.json`, getApiRequestInit())
        .then(r => r.json());
    const fileUploads_ = fetch(`https://www.nexusmods.com/Core/Libs/Common/Widgets/Graph?GetModReleases&game_id=${topLevel.game_id}&mod_id=${modID}&startdate=0&enddate=${Date.now()}`, getApiRequestInit())
        .then(r => r.json());
    const [endorsements, dlAndViews, fileUploads] = await Promise.all([endorsements_, dlAndViews_, fileUploads_]);
    console.debug('Fetched stats: ', { topLevel, endorsements, dlAndViews, fileUploads });
    return { topLevel, endorsements, dlAndViews, fileUploads };
}
function parseStats(stats) {
    function parseDate(str) {
        const firstTempDate = new Date(str);
        return new Date(firstTempDate.getFullYear(), firstTempDate.getMonth(), firstTempDate.getDate());
    }
    const mappedDateToData = {};
    for (const [date, endorsementCount] of Object.entries(stats.endorsements.endorsements)) {
        const __thisDate = parseDate(date);
        const thisDate = __thisDate.getTime();
        if (!mappedDateToData[thisDate])
            mappedDateToData[thisDate] = {};
        mappedDateToData[thisDate].endorsements = endorsementCount;
        mappedDateToData[thisDate].dateObj = __thisDate;
    }
    for (const [date, dlCount] of Object.entries(stats.dlAndViews.mod_daily_counts)) {
        const __thisDate = parseDate(date);
        const thisDate = __thisDate.getTime();
        if (!mappedDateToData[thisDate])
            mappedDateToData[thisDate] = {};
        mappedDateToData[thisDate].downloads = dlCount;
        mappedDateToData[thisDate].dateObj = __thisDate;
    }
    for (const [date, viewCount] of Object.entries(stats.dlAndViews.mod_page_views)) {
        const __thisDate = parseDate(date);
        const thisDate = __thisDate.getTime();
        if (!mappedDateToData[thisDate])
            mappedDateToData[thisDate] = {};
        mappedDateToData[thisDate].pageViews = viewCount;
        mappedDateToData[thisDate].dateObj = __thisDate;
    }
    const releases = {};
    for (const release of stats.fileUploads.message.releases) {
        const thisDate = parseDate(release.date * 1000).getTime();
        if (!releases[thisDate])
            releases[thisDate] = [];
        release.date = thisDate;
        releases[thisDate].push(release);
    }
    Object.fromEntries(Object.entries(releases).sort());
    console.debug('Fetched releases:', releases);
    for (const [date] of Object.entries(mappedDateToData)) {
        const thisDate = parseInt(date);
        const lastReleaseDate = parseInt(Object.keys(releases)
            .filter(releaseDate => parseInt(releaseDate) <= thisDate).sort().pop()
            ?? '-1');
        const diffDays = lastReleaseDate === -1 ? null : Math.round((thisDate - lastReleaseDate) / (1000 * 60 * 60 * 24));
        mappedDateToData[thisDate].daysSinceLastUpload = diffDays;
    }
    return Object.values(mappedDateToData);
}
async function createFileTrees(topLevel, files) {
    let hasFinishedFiles = false;
    const fileTrees = [];
    const fileTreesByID = {};
    let filesById;
    const fileIDs = files.map(file => file.id[0]);
    const filesFetched = {};
    fileIDs.forEach(id => filesFetched[id] = false);
    const hiddenFiles = [];
    const canonicalFiles = await (await fetch(`${api_baseUrl}/${topLevel.domain_name}/mods/${topLevel.mod_id}/files.json`, getApiRequestInit())).json();
    canonicalFiles.files.forEach(file => filesById[file.id[0]] = file);
    console.debug('Fetched files from API:', canonicalFiles);
    for (const fileID of fileIDs) {
        if (filesFetched[fileID])
            continue;
        console.debug(`Fetching file ${fileID} separately...`);
        fetch(`${api_baseUrl}/${topLevel.domain_name}/mods/${topLevel.mod_id}/files/${fileID}.json`, getApiRequestInit())
            .then(async (fileData) => {
            hiddenFiles.push(await fileData.json());
            filesFetched[fileID] = true;
            finishFiles();
        });
    }
    finishFiles();
    async function finishFiles() {
        if (hasFinishedFiles || Object.values(filesFetched).includes(false))
            return;
        hasFinishedFiles = true;
        console.debug('Finished fetching files');
        console.debug('Files: ', [...canonicalFiles.files, ...hiddenFiles]);
        console.debug('Updates: ', canonicalFiles.file_updates);
        processFiles([...canonicalFiles.files, ...hiddenFiles], canonicalFiles.file_updates);
    }
    function processFiles(files, updates) {
        filesById = Object.fromEntries(files.map(file => [file.file_id, file]));
        for (const update of updates) {
            addUpdate(update);
        }
        console.debug('File Trees:', fileTrees);
        console.debug('File Trees by ID:', fileTreesByID);
    }
    function addUpdate(update) {
        const oldFile = filesById[update.old_file_id];
        if (!oldFile)
            throw new Error(`Could not find OLD file ${update.old_file_id} for update\n${JSON.stringify(update, undefined, 4)}`);
        const newFile = filesById[update.new_file_id];
        if (!newFile)
            throw new Error(`Could not find NEW file ${update.new_file_id} for update\n${JSON.stringify(update, undefined, 4)}`);
        const oldFileTree = fileTreesByID[oldFile.file_id] ?? { fileInfo: oldFile, oldFile: null };
        removeOldFileTree(update);
        const newFileTree = { fileInfo: newFile, oldFile: oldFileTree };
        fileTrees.push(newFileTree);
        fileTreesByID[newFile.file_id] = newFileTree;
    }
    function removeOldFileTree(update) {
        const oldFile = filesById[update.old_file_id];
        if (!oldFile)
            throw new Error(`Could not find OLD file ${update.old_file_id} for update\n${JSON.stringify(update, undefined, 4)}`);
        const oldFileTree = fileTreesByID[oldFile.file_id] ?? { fileInfo: oldFile, oldFile: null };
        const oldFileTreeIndex = fileTrees.indexOf(oldFileTree);
        console.log(oldFileTreeIndex);
        if (oldFileTreeIndex < 0)
            return;
        fileTrees.splice(oldFileTreeIndex, 1);
        removeOldFileTree(update);
    }
}
const csvHeader = 'Date\tDownloads\tPage Views\tEndorsements\tDays Since Last Upload';
function getArrayOfDataData(mappedDateToData) {
    return new Map(Object.entries(mappedDateToData).sort((a, b) => -((a[1]?.dateObj?.getTime() ?? 0) - (b[1]?.dateObj?.getTime() ?? 0))));
}
function getCSV(mappedDateToData) {
    const dataSortedByDescendingDate = getArrayOfDataData(mappedDateToData);
    const csvData = [...dataSortedByDescendingDate]
        .map(([, thisDateData]) => `${thisDateData.dateObj?.toLocaleDateString()}\t${thisDateData.downloads ?? 0}\t${thisDateData.pageViews ?? 0}\t${thisDateData.endorsements ?? 0}\t${thisDateData.daysSinceLastUpload ?? 'No Upload Yet'}`);
    console.debug('CSV data:', csvData);
    return csvData;
}
//# sourceMappingURL=data:application/json;base64,